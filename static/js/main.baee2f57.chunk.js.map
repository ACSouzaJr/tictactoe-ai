{"version":3,"sources":["features/board/Cell.module.css","features/board/boardSlice.ts","features/board/Cell.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","initialState","board","Array","fill","isGameFinished","winner","user","currentPlayer","player","reduce","round","symbol","prev","curr","a","b","c","terminal","fullBoard","result","action","Error","newBoard","playMove","state","error","alert","actions","index","minimax","gameWinner","utility","score","forEach","Math","max","min","boardSlice","createSlice","name","reducers","aiMove","move","bestScore","bestMove","findBestMove","makeMove","position","payload","resetGame","_","selectBoard","Cell","cellSymbol","useSelector","selectCell","dispatch","useDispatch","className","styles","cell","onClick","setTimeout","App","closeModal","map","visible","onClose","height","duration","store","configureStore","reducer","boardReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.baee2f57.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"Cell_cell__IxHmL\"};","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { AppThunk, RootState } from \"../../app/store\";\r\n\r\nexport type MoveType = \"X\" | \"O\" | null;\r\n\r\ninterface BoardState {\r\n  board: MoveType[];\r\n  isGameFinished: boolean;\r\n  winner: MoveType;\r\n  user: string;\r\n  currentPlayer: MoveType;\r\n}\r\n\r\nconst initialState: BoardState = {\r\n  board: Array(9).fill(null),\r\n  isGameFinished: false,\r\n  winner: null,\r\n  user: \"X\",\r\n  currentPlayer: \"X\",\r\n};\r\n\r\n/**\r\n * The Game always starts with X and O plays next\r\n * @param state Current board state\r\n * @return Symbol of the current player\r\n */\r\nconst player = (board: MoveType[]) => {\r\n  const game_round = board.reduce((round, symbol) => {\r\n    if (symbol !== null) {\r\n      round++;\r\n    }\r\n    return round;\r\n  }, 0);\r\n  return game_round % 2 === 0 ? \"X\" : \"O\";\r\n};\r\n\r\n/**\r\n * Return the winner of the game if any\r\n * @param state\r\n * @return winner move symbol or null for no winner\r\n */\r\nconst winner = (board: MoveType[]) => {\r\n  const winConditions = [\r\n    // Row\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    // Column\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    // Diagonal\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n\r\n  const winnerMoveType = winConditions.reduce((prev, curr) => {\r\n    const [a, b, c] = curr;\r\n\r\n    if (board[a] && board[a] === board[b] && board[a] === board[c])\r\n      return board[a];\r\n    else return prev;\r\n  }, null as MoveType);\r\n\r\n  return winnerMoveType;\r\n};\r\n\r\n/**\r\n * Return if the game is in terminal state.\r\n * If any player won or no available moves.\r\n * @param state Current board state\r\n */\r\nconst terminal = (board: MoveType[]) => {\r\n  const fullBoard = board.reduce((prev, curr) => {\r\n    if (curr === null) return false;\r\n    else return prev;\r\n  }, true);\r\n\r\n  return winner(board) || fullBoard;\r\n};\r\n\r\n/**\r\n * Return the result of appling an action to a set state\r\n * in the board.\r\n * @param state current board state\r\n * @param action position to play on the board\r\n * @return a copy of the state with the action\r\n */\r\nconst result = (board: MoveType[], action: number) => {\r\n  // If the cell is not empty return\r\n  if (board[action]) throw Error(\"Illegal move\");\r\n\r\n  // Discover hows turn it is\r\n  const symbol = player(board);\r\n  const newBoard = [...board];\r\n\r\n  newBoard[action] = symbol;\r\n\r\n  return newBoard;\r\n};\r\n\r\nconst playMove = (state: BoardState, action: number) => {\r\n  try {\r\n    const newBoard = result(state.board, action);\r\n    state.board = newBoard;\r\n\r\n    if (terminal(newBoard)) {\r\n      state.winner = winner(newBoard);\r\n      state.isGameFinished = true;\r\n      state.currentPlayer = null;\r\n    } else {\r\n      state.currentPlayer = player(newBoard);\r\n    }\r\n  } catch (error) {\r\n    alert(error);\r\n  }\r\n};\r\n\r\nconst actions = (board: MoveType[]) => {\r\n  const actions = board.reduce<number[]>((prev, curr, index) => {\r\n    if (curr === null) {\r\n      return [...prev, index];\r\n    }\r\n    return prev;\r\n  }, []);\r\n\r\n  return actions;\r\n};\r\n\r\nconst utility = (board: MoveType[]) => {\r\n  const gameWinner = winner(board);\r\n\r\n  if (gameWinner === \"X\") {\r\n    return 1;\r\n  } else if (gameWinner === \"O\") {\r\n    return -1;\r\n  } else {\r\n    return 0;\r\n  }\r\n};\r\n\r\nconst minimax = (board: MoveType[]) => {\r\n  if (terminal(board)) {\r\n    return utility(board);\r\n  }\r\n\r\n  if (player(board) === \"X\") {\r\n    // User Maximazer\r\n    let score = -1000; // Low score\r\n\r\n    actions(board).forEach((action) => {\r\n      score = Math.max(score, minimax(result(board, action)));\r\n    });\r\n    return score;\r\n  } else {\r\n    // AI Minimizer\r\n    let score = 1000; // Low score\r\n\r\n    actions(board).forEach((action) => {\r\n      score = Math.min(score, minimax(result(board, action)));\r\n    });\r\n    return score;\r\n  }\r\n};\r\n\r\nconst findBestMove = (board: MoveType[]) => {\r\n  if (terminal(board)) {\r\n    return null;\r\n  }\r\n\r\n  let bestScore = 1000; // High value\r\n  let bestMove = -1; // Initial illegal move(typescript)\r\n  let score = bestScore;\r\n\r\n  actions(board).forEach((action) => {\r\n    score = minimax(result(board, action));\r\n\r\n    if (score < bestScore) {\r\n      // The AI Wants mo minimaze the player score\r\n      bestScore = score;\r\n      bestMove = action;\r\n    }\r\n  });\r\n\r\n  return bestMove;\r\n};\r\n\r\nexport const boardSlice = createSlice({\r\n  name: \"board\",\r\n  initialState,\r\n  reducers: {\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    aiMove: (state) => {\r\n      // AIs turn\r\n      const move = findBestMove(state.board);\r\n      if (move) {\r\n        playMove(state, move);\r\n      }\r\n    },\r\n    makeMove: (state, action: PayloadAction<{ position: number }>) => {\r\n      const { position } = action.payload;\r\n\r\n      // Users Turn\r\n      playMove(state, position);\r\n    },\r\n    resetGame: (_) => initialState,\r\n  },\r\n});\r\n\r\nexport const { resetGame } = boardSlice.actions;\r\nconst { aiMove, makeMove } = boardSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const chooseCell = (position: number): AppThunk => (dispatch) => {\r\n  dispatch(makeMove({ position }));\r\n  setTimeout(() => {\r\n    dispatch(aiMove());\r\n  }, 300);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectBoard = (state: RootState) => state.board;\r\nexport const selectCell = (index: number) => (state: RootState) =>\r\n  state.board.board[index];\r\n\r\nexport default boardSlice.reducer;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { chooseCell, selectCell } from \"./boardSlice\";\r\nimport styles from \"./Cell.module.css\";\r\n\r\ntype CellProps = {\r\n  index: number;\r\n};\r\n\r\nexport function Cell({ index }: CellProps) {\r\n  const cellSymbol = useSelector(selectCell(index));\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className={styles.cell} onClick={() => dispatch(chooseCell(index))}>\r\n      {cellSymbol}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Modal from \"rodal\";\r\n// include styles\r\nimport \"rodal/lib/rodal.css\";\r\n\r\nimport { Cell } from \"./features/board/Cell\";\r\nimport { selectBoard, resetGame } from \"./features/board/boardSlice\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const { board, winner, isGameFinished, currentPlayer } = useSelector(\r\n    selectBoard\r\n  );\r\n\r\n  function closeModal() {\r\n    dispatch(resetGame());\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"game-wrapper\">\r\n        <div className=\"game-title-wrapper\">\r\n          <h1 className=\"game-title\">Play Tic Tac Toe</h1>\r\n          <h3 className=\"game-subtitle\">\r\n            {currentPlayer && `${currentPlayer} Turn`}\r\n          </h3>\r\n        </div>\r\n        <div className=\"game-board\">\r\n          {board.map((_, index) => (\r\n            <Cell key={index} index={index} />\r\n          ))}\r\n        </div>\r\n        <Modal\r\n          visible={isGameFinished}\r\n          onClose={closeModal}\r\n          height={200}\r\n          duration={100}\r\n        >\r\n          <div className=\"model-content\">\r\n            <h2 className=\"model-text\">\r\n              {winner ? `Game over: ${winner} wins` : \"Game Over: Tie\"}\r\n            </h2>\r\n            <button className=\"model-button\" onClick={closeModal}>\r\n              Play Again\r\n            </button>\r\n          </div>\r\n        </Modal>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\r\nimport boardReducer from \"../features/board/boardSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    board: boardReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}